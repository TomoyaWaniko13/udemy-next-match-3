// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account の主な役割は、ユーザーの認証情報を管理することです。
// 以下の doc に従って書いています。
// https://authjs.dev/getting-started/adapters/prisma
model Account {
  id                String  @id @default(cuid())
  // このアカウントが属するユーザーのID, User モデルの id フィールドを参照する外部キー
  userId            String
  // アカウントの種類（例：「oauth」、「email」など）
  type              String
  // 認証プロバイダーの名前（例：「google」、「facebook」など）
  provider          String
  // プロバイダーが割り当てた一意のアカウントID
  providerAccountId String
  // OAuth リフレッシュトークン(保護されたリソースにアクセスするための一時的な認証情報)
  refresh_token     String? @db.Text
  // OAuth アクセストークン(新しいアクセストークンを取得するための長期的な認証情報)
  access_token      String? @db.Text
  // トークンの有効期限（通常はUNIXタイムスタンプ）
  expires_at        Int?
  // トークンの種類（例：「Bearer」）
  token_type        String?
  // アクセストークンに付与されたスコープ（権限範囲）
  scope             String?
  // OpenID Connect IDトークン
  id_token          String? @db.Text
  // セッション状態情報（一部のプロバイダーで使用）
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model User の主な役割は、ユーザーの認証情報を管理することです。
// 以下の doc に従って書いています。
// https://authjs.dev/getting-started/adapters/prisma
model User {
  // 33 (Usign NextAuth callbacks)
  // token の sub field がこの id の値と同じです。
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  // email に関連づけられた Token が有効であれば、その email は認証されます。そのときに、emailVertified の値に現在の日時を設定します。
  emailVerified   DateTime?
  // OAuth providers を使う場合、password は必要ないので, optional にします。
  passwordHash    String?
  image           String?
  // gender, dateOfBirth など、フィルターに必要な情報をユーザーが入力したかを表します。
  profileComplete Boolean   @default(false)
  // 157. Adding the roles to Prisma
  role            Role      @default(MEMBER)

  member   Member?
  accounts Account[]
}

// 40 (Updating the prisma schema)
// 53 (Updating the Prisma schema for a many to many relationship)
// 80 (Setting up Prisma for messages)

// Member は profile 情報(gender, dateOfBrith, city, Photo[]など) を含む model です。
model Member {
  id          String   @id @default(cuid())
  // foregin key
  userId      String   @unique
  name        String
  gender      String
  dateOfBirth DateTime
  created     DateTime @default(now())
  updated     DateTime @default(now())
  description String
  city        String
  country     String
  // main imageのurl
  image       String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos            Photo[]
  // このメンバーが「いいね」をした他のメンバーのリストを表します。つまり、このメンバーが「いいね」の送信元（source）となるケースです。
  sourceLikes       Like[]    @relation("source")
  // このメンバーが他のメンバーから「いいね」をされたリストを表します。つまり、このメンバーが「いいね」の対象（target）となるケースです。
  targetLikes       Like[]    @relation("target")
  senderMessages    Message[] @relation("sender")
  recipientMessages Message[] @relation("recipient")
}

// 40 (Updating the prisma schema)
// 70. Adding an image upload button
// 161. Adding the photo moderation functionality part 1
model Photo {
  id         String  @id @default(cuid())
  url        String
  // publicId は ユニークな string と Cloudinary 上で保存されるフォルダ一の名前を組み合わせたものです。
  // publicId が null であれば、その Photo は file system 上の Photo です。
  publicId   String?
  isApproved Boolean @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

// 53 (Updating the Prisma schema for a many to many relationship)

// Userは他の複数のUserに"いいねする"ことができます。また、Userは他の複数のUserに"いいねされる"ことができます。
// つまり、many-to-many relationshipです。
model Like {
  // 「いいね」を送信したユーザーを表します。
  sourceUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)
  // 「いいね」を受け取ったユーザーを表します。 
  targetUserId String
  targetMember Member @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
}

// 80 (Setting up Prisma for messages)
// many to many type of relationship. One member can send many messages and also that member can receive many messages.
model Message {
  id               String    @id @default(cuid())
  text             String
  created          DateTime  @default(now())
  dateRead         DateTime?
  // メッセージを物理的に削除せずに、senderDeleted または recipientDeleted を true に設定することで、各ユーザーの視点でメッセージを
  // 「削除」できます。クエリ時にこれらのフラグを確認することで、「削除された」メッセージを表示から除外できます。
  senderDeleted    Boolean   @default(false)
  recipientDeleted Boolean   @default(false)

  senderId    String?
  recipientId String?
  sender      Member? @relation("sender", fields: [senderId], references: [userId], onDelete: SetNull)
  recipient   Member? @relation("recipient", fields: [recipientId], references: [userId], onDelete: SetNull)
}

// 142 (Setting up tokens and resetting the Database)
model Token {
  // 一意の識別子として機能し、データベース内の各トークンを一意に識別します。
  id      String    @id @default(cuid())
  // トークンが関連付けられているユーザーのメールアドレスを保存します。
  email   String
  // 実際のトークン文字列を保存します。
  token   String
  // トークンの有効期限を指定します。
  expires DateTime
  // トークンの用途や目的を指定します。VERTIFICATION と PASSWORD_RESET の2つの値があります。
  // これにより、同じトークンモデルを複数の目的（メール検証、パスワードリセットなど）に使用できます。
  type    TokenType

  // Token は unique であるということです。つまり、1つの user は 1つの Token しか持てないということです。
  // ([provider, providerAccountId]) は、provider と providerAccountId の組み合わせは、
  // テーブル内で一意でないといけない、ということです。
  @@unique([email, token])
}

// 142 (Setting up tokens and resetting the Database)
enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

// 157. Adding the roles to Prisma
enum Role {
  ADMIN
  MEMBER
}
